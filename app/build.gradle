import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'application'
    id "org.moditect.gradleplugin"
}

if (!file("${projectDir}/pdxu.properties").exists()) {
    file("${projectDir}/pdxu.properties").write(file("${projectDir}/pdxu.properties.default").getText())
}

def currentOS = DefaultNativePlatform.currentOperatingSystem;
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        url = 'https://maven.nikr.net/'
    }
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "org.openjfx:javafx-base:16:${platform}"
    implementation "org.openjfx:javafx-controls:16:${platform}"
    implementation "org.openjfx:javafx-graphics:16:${platform}"
    implementation 'com.jfoenix:jfoenix:9.0.10'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation group: 'org.kordamp.ikonli', name: 'ikonli-javafx', version: "11.3.5"
    implementation group: 'org.kordamp.ikonli', name: 'ikonli-materialdesign-pack', version: "11.3.5"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "2.11.3"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha1'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.0-alpha1'

    implementation files("$buildDir/generated-modules/com.realityinteractive.imageio.tga-master-SNAPSHOT.jar")
    implementation files("$buildDir/generated-modules/dds-1.0.0.jar")
    implementation files("$buildDir/generated-modules/commons-lang3-3.12.0.jar")
    implementation files("$buildDir/generated-modules/commons-io-2.8.0.jar")
    implementation files("$buildDir/generated-modules/commons-collections4-4.4.jar")
    implementation files("$buildDir/generated-modules/sentry-4.3.0.jar")
    implementation files("$buildDir/generated-modules/jnativehook-2.0.2.jar")

    implementation project(':core')
}

addDependenciesModuleInfo {
    overwriteExistingFiles = true
    jdepsExtraArgs = ['-q']
    outputDirectory = file("$buildDir/generated-modules")
    modules {
        module {
            artifact 'com.1stleg:jnativehook:2.0.2'
            moduleInfoSource = '''
                module org.jnativehook {
                    exports org.jnativehook;
                    exports org.jnativehook.keyboard;
                    requires java.logging;
                    requires java.desktop;
                }
            '''
        }
        module {
            artifact 'io.sentry:sentry:4.3.0'
            moduleInfoSource = '''
                module io.sentry {
                    exports io.sentry;
                    opens io.sentry to com.google.gson;
                    
                    exports io.sentry.protocol;
                    opens io.sentry.protocol to com.google.gson;
                    
                    exports io.sentry.adapters;
                    opens io.sentry.adapters to com.google.gson;
                    
                    exports io.sentry.config;
                    opens io.sentry.config to com.google.gson;
                    
                    exports io.sentry.transport;
                    opens io.sentry.transport to com.google.gson;
                    
                    exports io.sentry.util;
                    opens io.sentry.util to com.google.gson;
                    
                    requires com.google.gson;
                }
            '''
        }
        module {
            artifact 'com.github.tmyroadctfig:com.realityinteractive.imageio.tga:master-SNAPSHOT'
            moduleInfoSource = '''
                module com.realityinteractive.imageio.tga {
                    requires java.desktop;
                    exports com.realityinteractive.imageio.tga;
                }
            '''
        }
        module {
            artifact 'net.nikr:dds:1.0.0'
            moduleInfoSource = '''
                module net.nikr.dds {
                    requires java.desktop;
                    exports net.nikr.dds;
                }
            '''
        }
        module {
            artifact 'org.apache.commons:commons-lang3:3.12.0'
            moduleInfoSource = '''
                module org.apache.commons.lang {
                    exports org.apache.commons.lang3;
                    exports org.apache.commons.lang3.function;
                    exports org.apache.commons.lang3.arch;
                    exports org.apache.commons.lang3.reflect;
                }
            '''
        }
        module {
            artifact 'org.apache.commons:commons-collections4:4.4'
            moduleInfoSource = '''
                module org.apache.commons.collections4 {
                    exports org.apache.commons.collections4;
                    exports org.apache.commons.collections4.bidimap;
                }
            '''
        }
        module {
            artifact 'commons-io:commons-io:2.8.0'
            moduleInfoSource = '''
                module org.apache.commons.io {
                    exports org.apache.commons.io;
                    exports org.apache.commons.io.file;
                    exports org.apache.commons.io.input;
                    exports org.apache.commons.io.filefilter;
                }
            '''
        }
    }
}

task copyModules(type: Copy) {
    into "${buildDir}/modules"
    from configurations.runtimeClasspath
}

task copyOutput(type: Copy) {
    into "${buildDir}/modules"
    from "${buildDir}/libs"
}


task createImage(type: DefaultTask, dependsOn: [copyModules, copyOutput]) {
}
