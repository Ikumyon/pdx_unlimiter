plugins {
    id 'application'
    id "org.moditect.gradleplugin" version "1.0.0-rc3"
    id 'org.openjfx.javafxplugin' version '0.0.9'
}

group 'com.crschnick.pdx_unlimiter'
version '0.1-SNAPSHOT'

java {
    modularity.inferModulePath = true
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

application {
    mainModule = 'com.crschnick.pdx_unlimiter.app'
    mainClass = 'com.crschnick.pdx_unlimiter.app.Main'
}

javafx {
    version = '15'
    modules = [ 'javafx.controls', 'javafx.base', 'javafx.graphics', 'javafx.swing' ]
}

repositories {
    mavenCentral()
    maven {
        url = 'http://maven.nikr.net/'
    }
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "2.11.3"
    implementation files("$buildDir/generated-modules/com.realityinteractive.imageio.tga-master-SNAPSHOT.jar")
    implementation files("$buildDir/generated-modules/dds-1.0.0.jar")
    implementation files("$buildDir/generated-modules/commons-lang3-3.11.jar")
    implementation files("$buildDir/generated-modules/commons-io-2.8.0.jar")
    implementation files("$buildDir/generated-modules/slf4j-api-1.7.30.jar")
    implementation files("$buildDir/generated-modules/sentry-1.7.30.jar")
    implementation files("$buildDir/generated-modules/jnativehook-2.1.0.jar")
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    implementation project(':eu4')
}

addDependenciesModuleInfo {
    jdepsExtraArgs = ['-q']
    outputDirectory = file("$buildDir/generated-modules")
    modules {
        module {
            artifact group: 'com.1stleg', name: 'jnativehook', version: '2.1.0'
            moduleInfoSource = '''
                module org.jnativehook {
                    exports org.jnativehook;
                    exports org.jnativehook.keyboard;
                   requires java.logging;
                   requires java.desktop;
                }
            '''
        }
        module {
            artifact 'io.sentry:sentry:1.7.30'
            moduleInfoSource = '''
                module io.sentry {
                    exports io.sentry;
                    requires org.slf4j;
                    requires java.naming;
                    requires com.fasterxml.jackson.core;
                }
            '''
        }
        module {
            artifact 'org.slf4j:slf4j-api:1.7.30'
            moduleInfoSource = '''
                module org.slf4j {
                    exports org.slf4j;
                }
            '''
        }
        module {
            artifact 'com.github.tmyroadctfig:com.realityinteractive.imageio.tga:master-SNAPSHOT'
            moduleInfoSource = '''
                module com.realityinteractive.imageio.tga {
                    requires java.se;
                    exports com.realityinteractive.imageio.tga;
                }
            '''
        }
        module {
            artifact 'net.nikr:dds:1.0.0'
            moduleInfoSource = '''
                module net.nikr.dds {
                    requires java.se;
                    exports net.nikr.dds;
                    provides javax.imageio.spi.ImageReaderSpi with net.nikr.dds.DDSImageReaderSpi;
                }
            '''
        }
        module {
            artifact 'org.apache.commons:commons-lang3:3.11'
            moduleInfoSource = '''
                module org.apache.commons.lang3 {
                    requires java.se;
                    exports org.apache.commons.lang3;
                    exports org.apache.commons.lang3.function;
                    exports org.apache.commons.lang3.arch;
                }
            '''
        }
        module {
            artifact 'commons-io:commons-io:2.8.0'
            moduleInfoSource = '''
                module org.apache.commons.io {
                    requires java.se;
                    exports org.apache.commons.io;
                    exports org.apache.commons.io.file;
                }
            '''
        }
    }
}

task copyModules(type: Copy) {
    into "${buildDir}/modules"
    from configurations.runtimeClasspath
}

task copyOutput(type: Copy) {
    into "${buildDir}/modules"
    from "${buildDir}/libs"
}

addDependenciesModuleInfo.finalizedBy(copyModules)
build.finalizedBy(copyOutput)

createRuntimeImage {
    jdkHome = '$JAVA_HOME'
    outputDirectory = file("$buildDir/jlink-image")
    modulePath = [file("$buildDir/modules")]
    modules = ['com.crschnick.pdx_unlimiter.app']
    excludedResources = []
    launcher {
        name = 'Main'
        module = 'com.crschnick.pdx_unlimiter.app'
    }
    compression = 2
    stripDebug = true
}

createRuntimeImage.dependsOn(build)

