import com.github.langmo.gradlensis.GradleNsisTask

plugins {
    id 'idea'
    id 'application'
    id "com.github.langmo.gradlensis" version "0.1.0"
    id "org.moditect.gradleplugin" version "1.0.0-rc3"
}

version '0.1-SNAPSHOT'

java {
    modularity.inferModulePath = true
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}

application {
    mainModule = 'com.crschnick.pdx_unlimiter.updater'
    mainClass = 'com.crschnick.pdx_unlimiter.updater.Updater'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "2.11.3"
    implementation files("$buildDir/generated-modules/commons-lang3-3.11.jar")
}

addDependenciesModuleInfo {
    jdepsExtraArgs = ['-q']
    outputDirectory = file("$buildDir/generated-modules")
    modules {
        module {
            artifact 'org.apache.commons:commons-lang3:3.11'
            moduleInfoSource = '''
                module org.apache.commons.lang3 {
                    requires java.se;
                    exports org.apache.commons.lang3;
                    exports org.apache.commons.lang3.arch;
                }
            '''
        }
    }
}

task copyModules(type: Copy) {
    into "${buildDir}/modules"
    from configurations.runtimeClasspath
}

task copyOutput(type: Copy) {
    into "${buildDir}/modules"
    from "${buildDir}/libs"
}

build.dependsOn(copyModules)
build.dependsOn(copyOutput)

createRuntimeImage {
    jdkHome = '$JAVA_HOME'
    outputDirectory = file("$buildDir/image")
    modulePath = [file("$buildDir/modules")]
    modules = ['com.crschnick.pdx_unlimiter.updater']
    excludedResources = []
    launcher {
        name = 'Updater'
        module = 'com.crschnick.pdx_unlimiter.updater'
    }
    compression = 2
    stripDebug = true
}

createRuntimeImage.dependsOn(build)


task createLauncherExe(type: GradleNsisTask) {
    configuration = file("launcher.nsi")
    runIn =  file("${projectDir}")
    destinationFolder = file("${buildDir}/bin")
}
createLauncherExe.dependsOn(createRuntimeImage)


task createInstallerExe(type: GradleNsisTask) {
    configuration = file("installer.nsi")
    runIn =  file("${projectDir}")
    destinationFolder = file("${buildDir}/bin")
}
createInstallerExe.dependsOn(createLauncherExe)

task createDist(type: DefaultTask)
createDist.dependsOn(createInstallerExe)
