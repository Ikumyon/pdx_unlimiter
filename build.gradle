plugins {
    id 'application'
    id "org.moditect.gradleplugin" version "1.0.0-rc3"
    id 'org.beryx.jlink' version '2.23.3'
}

import org.beryx.jlink.JlinkTask
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

setVersion '2.7-SNAPSHOT'

java {
    modularity.inferModulePath = true
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

List<String> runArgs = [
        "--add-exports", "javafx.graphics/com.sun.javafx.scene=com.jfoenix",
        "--add-exports", "javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports", "javafx.base/com.sun.javafx.binding=com.jfoenix",
        "--add-exports", "javafx.base/com.sun.javafx.event=com.jfoenix",
        "--add-exports", "javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports", "javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-opens", "com.google.gson/com.google.gson.internal=io.sentry",
        "--add-opens", "java.base/java.lang.reflect=com.jfoenix",
        "--add-opens", "com.crschnick.pdx_unlimiter.core/com.crschnick.pdx_unlimiter.core.info=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdx_unlimiter.core/com.crschnick.pdx_unlimiter.core.info.eu4=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdx_unlimiter.core/com.crschnick.pdx_unlimiter.core.info.ck3=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdx_unlimiter.core/com.crschnick.pdx_unlimiter.core.info.hoi4=com.fasterxml.jackson.databind",
        "--add-opens", "com.crschnick.pdx_unlimiter.core/com.crschnick.pdx_unlimiter.core.info.stellaris=com.fasterxml.jackson.databind",
        "-Xmx4g",
        "-XX:+ExitOnOutOfMemoryError"]

application {
    mainModule = 'com.crschnick.pdx_unlimiter.app'
    mainClass = 'com.crschnick.pdx_unlimiter.app.Main'
    applicationDefaultJvmArgs = runArgs + ["-ea"]
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
        url = 'https://maven.nikr.net/'
    }
    maven { url "https://jitpack.io" }
}

def currentOS = DefaultNativePlatform.currentOperatingSystem;

jlink {
    imageDir = file("$buildDir/image")
    options = [
            // '--strip-debug',
            '--compress', '2',
            '--no-header-files',
            '--no-man-pages']
    launcher {
        name = 'pdxu'
        jvmArgs = runArgs
    }

    customImage {
        appModules = [
                'com.crschnick.pdx_unlimiter.editor',
                'com.crschnick.pdx_unlimiter.app',
                'org.slf4j',
                'org.slf4j.simple',
                'jdk.crypto.ec',
                'org.kordamp.ikonli.materialdesign',
                'jdk.zipfs'
        ]
    }
}


task copyModules(type: Copy) {
    into "${buildDir}/modules"
    from configurations.runtimeClasspath
}

task copyOutput(type: Copy) {
    into "${buildDir}/modules"
    from "${buildDir}/libs"
}

task createImage(type: JlinkTask, dependsOn: [copyModules, copyOutput]) {
}

task writeVersion(type: DefaultTask) {
    doLast {
        mkdir "${buildDir}/image/"
        file("${buildDir}/image/version").write(String.valueOf(version))
    }
}

task copyResources(type: Copy) {
    into "${buildDir}/image/resources"
    from "${projectDir}/resources"
}

task copyLang(type: Copy) {
    into "${buildDir}/image/lang"
    from "${projectDir}/lang"
}

createImage.finalizedBy(writeVersion, copyResources, copyLang)

task createDist(type: Zip, dependsOn: createImage) {
    destinationDirectory = buildDir
    archivesBaseName = "pdx_unlimiter"
    archiveAppendix = currentOS.windows ? "windows" : "linux"
    archiveVersion = ""
    from "${buildDir}/image"
}
